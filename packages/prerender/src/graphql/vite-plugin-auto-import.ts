import path from 'node:path'

import unimportPlugin from 'unimport/unplugin'
import autoImport from 'unplugin-auto-import/vite'

import {
  getConfig,
  getPaths,
  importStatementPath,
} from '@cedarjs/project-config'

export function autoImportsPlugin() {
  // Need the project config to know if trusted graphql documents is being used
  // and decide to use the gql tag import or the trusted document gql function
  // generated by code gen client preset
  const config = getConfig()
  const cedarPaths = getPaths()
  const useTrustedDocumentsGqlTag = config?.graphql?.trustedDocuments

  return [
    autoImport({
      // targets to transform
      include: [
        /\.[tj]sx?$/, // .ts, .tsx, .js, .jsx
      ],

      // global imports to register
      imports: [
        // import gql from 'graphql-tag'
        !useTrustedDocumentsGqlTag && {
          'graphql-tag': ['gql'],
        },
        // import { gql } from 'src/graphql/gql'
        useTrustedDocumentsGqlTag && {
          [importStatementPath(
            path.join(cedarPaths.web.base, 'src', 'graphql', 'gql'),
          )]: ['gql'],
        },
        // import { context } from '@cedarjs/context'
        {
          '@cedarjs/context': ['context'],
        },
      ].filter(<T>(v?: T | false): v is T => Boolean(v)),

      // Types aren't important since the output is ephemeral
      dts: false,
    }),
    unimportPlugin.vite({
      imports: [
        // import React from 'react'
        {
          name: 'default',
          as: 'React',
          from: 'react',
        },
      ],
    }),
  ]
}
